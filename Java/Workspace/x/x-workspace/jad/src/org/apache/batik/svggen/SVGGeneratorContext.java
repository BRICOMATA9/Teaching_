// Decompiled by Jad v1.5.8e. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.geocities.com/kpdus/jad.html
// Decompiler options: packimports(3) 

package org.apache.batik.svggen;

import java.awt.*;
import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.util.Locale;
import org.w3c.dom.Document;

// Referenced classes of package org.apache.batik.svggen:
//            ErrorConstants, SVGIDGenerator, DefaultExtensionHandler, ImageHandlerBase64Encoder, 
//            DefaultStyleHandler, DefaultErrorHandler, SVGGraphics2DRuntimeException, SimpleImageHandler, 
//            ImageHandler, GenericImageHandler, ExtensionHandler, StyleHandler, 
//            ErrorHandler

public class SVGGeneratorContext
    implements ErrorConstants
{
    public static class GraphicContextDefaults
    {

        public void setStroke(Stroke stroke1)
        {
            stroke = stroke1;
        }

        public Stroke getStroke()
        {
            return stroke;
        }

        public void setComposite(Composite composite1)
        {
            composite = composite1;
        }

        public Composite getComposite()
        {
            return composite;
        }

        public void setClip(Shape shape)
        {
            clip = shape;
        }

        public Shape getClip()
        {
            return clip;
        }

        public void setRenderingHints(RenderingHints renderinghints)
        {
            hints = renderinghints;
        }

        public RenderingHints getRenderingHints()
        {
            return hints;
        }

        public void setFont(Font font1)
        {
            font = font1;
        }

        public Font getFont()
        {
            return font;
        }

        public void setBackground(Color color)
        {
            background = color;
        }

        public Color getBackground()
        {
            return background;
        }

        public void setPaint(Paint paint1)
        {
            paint = paint1;
        }

        public Paint getPaint()
        {
            return paint;
        }

        protected Paint paint;
        protected Stroke stroke;
        protected Composite composite;
        protected Shape clip;
        protected RenderingHints hints;
        protected Font font;
        protected Color background;

        public GraphicContextDefaults()
        {
        }
    }


    protected SVGGeneratorContext(Document document)
    {
        svgFont = false;
        decimalFormat = decimalFormats[3];
        setDOMFactory(document);
    }

    public static SVGGeneratorContext createDefault(Document document)
    {
        SVGGeneratorContext svggeneratorcontext = new SVGGeneratorContext(document);
        svggeneratorcontext.setIDGenerator(new SVGIDGenerator());
        svggeneratorcontext.setExtensionHandler(new DefaultExtensionHandler());
        svggeneratorcontext.setImageHandler(new ImageHandlerBase64Encoder());
        svggeneratorcontext.setStyleHandler(new DefaultStyleHandler());
        svggeneratorcontext.setComment("Generated by the Batik Graphics2D SVG Generator");
        svggeneratorcontext.setErrorHandler(new DefaultErrorHandler());
        return svggeneratorcontext;
    }

    public final GraphicContextDefaults getGraphicContextDefaults()
    {
        return gcDefaults;
    }

    public final void setGraphicContextDefaults(GraphicContextDefaults graphiccontextdefaults)
    {
        gcDefaults = graphiccontextdefaults;
    }

    public final SVGIDGenerator getIDGenerator()
    {
        return idGenerator;
    }

    public final void setIDGenerator(SVGIDGenerator svgidgenerator)
    {
        if(svgidgenerator == null)
        {
            throw new SVGGraphics2DRuntimeException("idGenerator should not be null");
        } else
        {
            idGenerator = svgidgenerator;
            return;
        }
    }

    public final Document getDOMFactory()
    {
        return domFactory;
    }

    public final void setDOMFactory(Document document)
    {
        if(document == null)
        {
            throw new SVGGraphics2DRuntimeException("domFactory should not be null");
        } else
        {
            domFactory = document;
            return;
        }
    }

    public final ExtensionHandler getExtensionHandler()
    {
        return extensionHandler;
    }

    public final void setExtensionHandler(ExtensionHandler extensionhandler)
    {
        if(extensionhandler == null)
        {
            throw new SVGGraphics2DRuntimeException("extensionHandler should not be null");
        } else
        {
            extensionHandler = extensionhandler;
            return;
        }
    }

    public final ImageHandler getImageHandler()
    {
        return imageHandler;
    }

    public final void setImageHandler(ImageHandler imagehandler)
    {
        if(imagehandler == null)
        {
            throw new SVGGraphics2DRuntimeException("imageHandler should not be null");
        } else
        {
            imageHandler = imagehandler;
            genericImageHandler = new SimpleImageHandler(imagehandler);
            return;
        }
    }

    public final void setGenericImageHandler(GenericImageHandler genericimagehandler)
    {
        if(genericimagehandler == null)
        {
            throw new SVGGraphics2DRuntimeException("imageHandler should not be null");
        } else
        {
            imageHandler = null;
            genericImageHandler = genericimagehandler;
            return;
        }
    }

    public final StyleHandler getStyleHandler()
    {
        return styleHandler;
    }

    public final void setStyleHandler(StyleHandler stylehandler)
    {
        if(stylehandler == null)
        {
            throw new SVGGraphics2DRuntimeException("styleHandler should not be null");
        } else
        {
            styleHandler = stylehandler;
            return;
        }
    }

    public final String getComment()
    {
        return generatorComment;
    }

    public final void setComment(String s)
    {
        generatorComment = s;
    }

    public final ErrorHandler getErrorHandler()
    {
        return errorHandler;
    }

    public final void setErrorHandler(ErrorHandler errorhandler)
    {
        if(errorhandler == null)
        {
            throw new SVGGraphics2DRuntimeException("errorHandler should not be null");
        } else
        {
            errorHandler = errorhandler;
            return;
        }
    }

    public final boolean isEmbeddedFontsOn()
    {
        return svgFont;
    }

    public final void setEmbeddedFontsOn(boolean flag)
    {
        svgFont = flag;
    }

    public final int getPrecision()
    {
        return precision;
    }

    public final void setPrecision(int i)
    {
        if(i < 0)
            precision = 0;
        else
        if(i > 12)
            precision = 12;
        else
            precision = i;
        decimalFormat = decimalFormats[precision];
    }

    public final String doubleString(double d)
    {
        double d1 = Math.abs(d);
        if(d1 >= 100000000D || (double)(int)d == d)
            return Integer.toString((int)d);
        else
            return decimalFormat.format(d);
    }

    Document domFactory;
    ImageHandler imageHandler;
    GenericImageHandler genericImageHandler;
    ExtensionHandler extensionHandler;
    SVGIDGenerator idGenerator;
    StyleHandler styleHandler;
    String generatorComment;
    ErrorHandler errorHandler;
    boolean svgFont;
    GraphicContextDefaults gcDefaults;
    int precision;
    protected DecimalFormat decimalFormat;
    protected static DecimalFormatSymbols dsf;
    protected static DecimalFormat decimalFormats[];

    static 
    {
        dsf = new DecimalFormatSymbols(Locale.US);
        decimalFormats = new DecimalFormat[13];
        decimalFormats[0] = new DecimalFormat("#", dsf);
        String s = "#.";
        for(int i = 0; i <= 12; i++)
        {
            s = s + "#";
            decimalFormats[i] = new DecimalFormat(s, dsf);
        }

    }
}
