import java.util.List;
import java.util.ArrayList;
import java.lang.String;
import javax.swing.JOptionPane;
public final class USBMemoryStick implements StorageDevice {
 protected final List < Block > blocks=new ArrayList < Block >();
 private final int capacity ;
 private int used ; 
 
 public void defragmentation(){
	Block g;
	int i=0;
	for(i=0;i<blocks.size();i++){
		if(blocks.get(i).getName().equals("vide")){
			int j=i;
			for(j=i;j<blocks.size() && blocks.get(j).getName().equals("vide");j++);
			if(j<blocks.size()){		
				g=blocks.get(i);
				blocks.set(i,blocks.get(j));
				blocks.set(j,g);
			}
		}
	}
	for(i=0;i<blocks.size() && !blocks.get(i).getName().equals("vide");i++);
	for(;i<blocks.size() && blocks.get(i).getName().equals("vide");i++){blocks.remove(i);used-=blocks.get(i).getSize();}
		
}
 
 
 public USBMemoryStick ( int capacity ) { 
  this.capacity=capacity;
  blocks.add(new EmptyBlock(capacity)); 
 }
 
 public int getCapacity(){
 return capacity;
 }

 public int getUsed(){
 return used;
 }
	
 public boolean isFull(){
  if(used<capacity)return false;
   else return true;
 }
 
 public void addFile (File f){
 		if(test(f)<0) defragmentation();
 			int c=blocks.get(test(f)).getSize()-f.getSize();
   		blocks.add(test(f),f);
  		used+=f.getSize();
  		blocks.set(test(f),new EmptyBlock (c));
  }

 public int getSize(){
 	return blocks.size();
 	}
 	
 	public int test(File f){
 		int cpt=0;
 		for(int i=0;i<blocks.size();i++) if(getblocks(i).getName()=="vide" && getblocks(i).getSize()>=f.getSize()) return (i); 
 		return -1;
 	}
 		
  public Block getblocks(int i){
 	return blocks.get(i);
 	}
	
 public File getFile (String name){
 	int i=0;
 	while(!blocks.get(i).getName().equals(name)) i++;
 	return (File)blocks.get(i);
 }
 
  public File remove (String name){
  	int i=0;  
  	if(blocks.contains(getFile(name))) System.out.println("sssssssssssssssssssssssss");	
  	while(!blocks.get(i).getName().equals(name)) i++;
  	if (blocks.get(i).getName().equals(name)) used-=(blocks.get(i).getSize());
   	return (File)blocks.set(i,new EmptyBlock(blocks.get(i).getSize()));		
 }

 private final static class EmptyBlock implements Block
 {
  private final int size ;
  private String name ;
  public EmptyBlock ( int size ) { 
   this.size=size; 
   this.name="vide";
  }
  public int getSize(){
   return size;
  }
  
  public String getName(){
  return "vide";
 }
  public String toString(){
 return "fichier vide \ntaille du vide : "+getSize()+"\n";
 } 
 public void setName(String name){
	this.name="vide";
 } 
 }
}

