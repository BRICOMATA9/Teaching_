// Decompiled by Jad v1.5.8e. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.geocities.com/kpdus/jad.html
// Decompiler options: packimports(3) 

package org.apache.batik.svggen;

import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.FontMetrics;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.GraphicsConfiguration;
import java.awt.Image;
import java.awt.Shape;
import java.awt.Stroke;
import java.awt.font.TextLayout;
import java.awt.geom.AffineTransform;
import java.awt.geom.NoninvertibleTransformException;
import java.awt.image.BufferedImage;
import java.awt.image.BufferedImageOp;
import java.awt.image.ImageObserver;
import java.awt.image.RenderedImage;
import java.awt.image.renderable.RenderableImage;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.io.Writer;
import java.text.AttributedCharacterIterator;
import org.apache.batik.ext.awt.g2d.AbstractGraphics2D;
import org.apache.batik.ext.awt.g2d.GraphicContext;
import org.apache.batik.util.XMLConstants;
import org.w3c.dom.Document;
import org.w3c.dom.DocumentFragment;
import org.w3c.dom.Element;
import org.w3c.dom.Node;

// Referenced classes of package org.apache.batik.svggen:
//            SVGSyntax, ErrorConstants, SVGGeneratorContext, GenericImageHandler, 
//            SVGIDGenerator, DefaultStyleHandler, DefaultErrorHandler, SVGGraphics2DRuntimeException, 
//            SVGShape, DOMTreeManager, DOMGroupManager, SVGGraphics2DIOException, 
//            ErrorHandler, SVGCSSStyler, XmlWriter, SVGGraphicContextConverter, 
//            SVGFont, ImageHandler, ExtensionHandler

public class SVGGraphics2D extends AbstractGraphics2D
    implements Cloneable, SVGSyntax, XMLConstants, ErrorConstants
{

    public final Dimension getSVGCanvasSize()
    {
        return svgCanvasSize;
    }

    public final void setSVGCanvasSize(Dimension dimension)
    {
        svgCanvasSize = new Dimension(dimension);
    }

    public final SVGGeneratorContext getGeneratorContext()
    {
        return generatorCtx;
    }

    public final SVGShape getShapeConverter()
    {
        return shapeConverter;
    }

    public final DOMTreeManager getDOMTreeManager()
    {
        return domTreeManager;
    }

    protected final void setDOMTreeManager(DOMTreeManager domtreemanager)
    {
        domTreeManager = domtreemanager;
        generatorCtx.genericImageHandler.setDOMTreeManager(domTreeManager);
    }

    protected final DOMGroupManager getDOMGroupManager()
    {
        return domGroupManager;
    }

    protected final void setDOMGroupManager(DOMGroupManager domgroupmanager)
    {
        domGroupManager = domgroupmanager;
    }

    public final Document getDOMFactory()
    {
        return generatorCtx.domFactory;
    }

    public final ImageHandler getImageHandler()
    {
        return generatorCtx.imageHandler;
    }

    public final GenericImageHandler getGenericImageHandler()
    {
        return generatorCtx.genericImageHandler;
    }

    public final ExtensionHandler getExtensionHandler()
    {
        return generatorCtx.extensionHandler;
    }

    public final void setExtensionHandler(ExtensionHandler extensionhandler)
    {
        generatorCtx.setExtensionHandler(extensionhandler);
    }

    public SVGGraphics2D(Document document)
    {
        this(SVGGeneratorContext.createDefault(document), false);
    }

    public SVGGraphics2D(Document document, ImageHandler imagehandler, ExtensionHandler extensionhandler, boolean flag)
    {
        this(buildSVGGeneratorContext(document, imagehandler, extensionhandler), flag);
    }

    public static SVGGeneratorContext buildSVGGeneratorContext(Document document, ImageHandler imagehandler, ExtensionHandler extensionhandler)
    {
        SVGGeneratorContext svggeneratorcontext = new SVGGeneratorContext(document);
        svggeneratorcontext.setIDGenerator(new SVGIDGenerator());
        svggeneratorcontext.setExtensionHandler(extensionhandler);
        svggeneratorcontext.setImageHandler(imagehandler);
        svggeneratorcontext.setStyleHandler(new DefaultStyleHandler());
        svggeneratorcontext.setComment("Generated by the Batik Graphics2D SVG Generator");
        svggeneratorcontext.setErrorHandler(new DefaultErrorHandler());
        return svggeneratorcontext;
    }

    public SVGGraphics2D(SVGGeneratorContext svggeneratorcontext, boolean flag)
    {
        super(flag);
        BufferedImage bufferedimage = new BufferedImage(1, 1, 2);
        fmg = bufferedimage.createGraphics();
        if(svggeneratorcontext == null)
        {
            throw new SVGGraphics2DRuntimeException("generatorContext should not be null");
        } else
        {
            setGeneratorContext(svggeneratorcontext);
            return;
        }
    }

    protected void setGeneratorContext(SVGGeneratorContext svggeneratorcontext)
    {
        generatorCtx = svggeneratorcontext;
        gc = new GraphicContext(new AffineTransform());
        SVGGeneratorContext.GraphicContextDefaults graphiccontextdefaults = svggeneratorcontext.getGraphicContextDefaults();
        if(graphiccontextdefaults != null)
        {
            if(graphiccontextdefaults.getPaint() != null)
                gc.setPaint(graphiccontextdefaults.getPaint());
            if(graphiccontextdefaults.getStroke() != null)
                gc.setStroke(graphiccontextdefaults.getStroke());
            if(graphiccontextdefaults.getComposite() != null)
                gc.setComposite(graphiccontextdefaults.getComposite());
            if(graphiccontextdefaults.getClip() != null)
                gc.setClip(graphiccontextdefaults.getClip());
            if(graphiccontextdefaults.getRenderingHints() != null)
                gc.setRenderingHints(graphiccontextdefaults.getRenderingHints());
            if(graphiccontextdefaults.getFont() != null)
                gc.setFont(graphiccontextdefaults.getFont());
            if(graphiccontextdefaults.getBackground() != null)
                gc.setBackground(graphiccontextdefaults.getBackground());
        }
        shapeConverter = new SVGShape(svggeneratorcontext);
        domTreeManager = new DOMTreeManager(gc, svggeneratorcontext, 3);
        domGroupManager = new DOMGroupManager(gc, domTreeManager);
        domTreeManager.addGroupManager(domGroupManager);
        svggeneratorcontext.genericImageHandler.setDOMTreeManager(domTreeManager);
    }

    public SVGGraphics2D(SVGGraphics2D svggraphics2d)
    {
        super(svggraphics2d);
        BufferedImage bufferedimage = new BufferedImage(1, 1, 2);
        fmg = bufferedimage.createGraphics();
        generatorCtx = svggraphics2d.generatorCtx;
        gc.validateTransformStack();
        shapeConverter = svggraphics2d.shapeConverter;
        domTreeManager = svggraphics2d.domTreeManager;
        domGroupManager = new DOMGroupManager(gc, domTreeManager);
        domTreeManager.addGroupManager(domGroupManager);
    }

    public void stream(String s)
        throws SVGGraphics2DIOException
    {
        stream(s, false);
    }

    public void stream(String s, boolean flag)
        throws SVGGraphics2DIOException
    {
        try
        {
            OutputStreamWriter outputstreamwriter = new OutputStreamWriter(new FileOutputStream(s), "ISO-8859-1");
            stream(((Writer) (outputstreamwriter)), flag);
            outputstreamwriter.flush();
            outputstreamwriter.close();
        }
        catch(SVGGraphics2DIOException svggraphics2dioexception)
        {
            throw svggraphics2dioexception;
        }
        catch(IOException ioexception)
        {
            generatorCtx.errorHandler.handleError(new SVGGraphics2DIOException(ioexception));
        }
    }

    public void stream(Writer writer)
        throws SVGGraphics2DIOException
    {
        stream(writer, false);
    }

    public void stream(Writer writer, boolean flag)
        throws SVGGraphics2DIOException
    {
        Element element = getRoot();
        stream(element, writer, flag);
    }

    public void stream(Element element, Writer writer)
        throws SVGGraphics2DIOException
    {
        stream(element, writer, false);
    }

    public void stream(Element element, Writer writer, boolean flag)
        throws SVGGraphics2DIOException
    {
        Node node = element.getParentNode();
        Node node1 = element.getNextSibling();
        try
        {
            element.setAttributeNS("http://www.w3.org/2000/xmlns/", "xmlns", "http://www.w3.org/2000/svg");
            element.setAttributeNS("http://www.w3.org/2000/xmlns/", "xmlns:xlink", "http://www.w3.org/1999/xlink");
            DocumentFragment documentfragment = element.getOwnerDocument().createDocumentFragment();
            documentfragment.appendChild(element);
            if(flag)
                SVGCSSStyler.style(documentfragment);
            XmlWriter.writeXml(documentfragment, writer);
            writer.flush();
        }
        catch(SVGGraphics2DIOException svggraphics2dioexception)
        {
            generatorCtx.errorHandler.handleError(svggraphics2dioexception);
        }
        catch(IOException ioexception)
        {
            generatorCtx.errorHandler.handleError(new SVGGraphics2DIOException(ioexception));
        }
        finally
        {
            if(node != null)
                if(node1 == null)
                    node.appendChild(element);
                else
                    node.insertBefore(element, node1);
        }
    }

    public java.util.List getDefinitionSet()
    {
        return domTreeManager.getDefinitionSet();
    }

    public Element getTopLevelGroup()
    {
        return getTopLevelGroup(true);
    }

    public Element getTopLevelGroup(boolean flag)
    {
        return domTreeManager.getTopLevelGroup(flag);
    }

    public void setTopLevelGroup(Element element)
    {
        domTreeManager.setTopLevelGroup(element);
    }

    public Element getRoot()
    {
        return getRoot(null);
    }

    public Element getRoot(Element element)
    {
        element = domTreeManager.getRoot(element);
        if(svgCanvasSize != null)
        {
            element.setAttributeNS(null, "width", "" + svgCanvasSize.width);
            element.setAttributeNS(null, "height", "" + svgCanvasSize.height);
        }
        return element;
    }

    public Graphics create()
    {
        return new SVGGraphics2D(this);
    }

    public void setXORMode(Color color)
    {
        generatorCtx.errorHandler.handleError(new SVGGraphics2DRuntimeException("XOR Mode is not supported by Graphics2D SVG Generator"));
    }

    public FontMetrics getFontMetrics(Font font)
    {
        return fmg.getFontMetrics(font);
    }

    public void copyArea(int i, int j, int k, int l, int i1, int j1)
    {
    }

    public boolean drawImage(Image image, int i, int j, ImageObserver imageobserver)
    {
        Element element = getGenericImageHandler().createElement(getGeneratorContext());
        AffineTransform affinetransform = getGenericImageHandler().handleImage(image, element, i, j, image.getWidth(null), image.getHeight(null), getGeneratorContext());
        if(affinetransform == null)
        {
            domGroupManager.addElement(element);
        } else
        {
            AffineTransform affinetransform1 = null;
            try
            {
                affinetransform1 = affinetransform.createInverse();
            }
            catch(NoninvertibleTransformException noninvertibletransformexception)
            {
                throw new SVGGraphics2DRuntimeException("unexpected exception");
            }
            gc.transform(affinetransform);
            domGroupManager.addElement(element);
            gc.transform(affinetransform1);
        }
        return true;
    }

    public boolean drawImage(Image image, int i, int j, int k, int l, ImageObserver imageobserver)
    {
        Element element = getGenericImageHandler().createElement(getGeneratorContext());
        AffineTransform affinetransform = getGenericImageHandler().handleImage(image, element, i, j, k, l, getGeneratorContext());
        if(affinetransform == null)
        {
            domGroupManager.addElement(element);
        } else
        {
            AffineTransform affinetransform1 = null;
            try
            {
                affinetransform1 = affinetransform.createInverse();
            }
            catch(NoninvertibleTransformException noninvertibletransformexception)
            {
                throw new SVGGraphics2DRuntimeException("unexpected exception");
            }
            gc.transform(affinetransform);
            domGroupManager.addElement(element);
            gc.transform(affinetransform1);
        }
        return true;
    }

    public void dispose()
    {
        domTreeManager.removeGroupManager(domGroupManager);
    }

    public void draw(Shape shape)
    {
        Stroke stroke = gc.getStroke();
        if(stroke instanceof BasicStroke)
        {
            Element element = shapeConverter.toSVG(shape);
            if(element != null)
                domGroupManager.addElement(element, (short)1);
        } else
        {
            Shape shape1 = stroke.createStrokedShape(shape);
            fill(shape1);
        }
    }

    public boolean drawImage(Image image, AffineTransform affinetransform, ImageObserver imageobserver)
    {
        boolean flag = true;
        if(affinetransform == null)
            flag = drawImage(image, 0, 0, ((ImageObserver) (null)));
        else
        if(affinetransform.getDeterminant() != 0.0D)
        {
            AffineTransform affinetransform1 = null;
            try
            {
                affinetransform1 = affinetransform.createInverse();
            }
            catch(NoninvertibleTransformException noninvertibletransformexception)
            {
                throw new SVGGraphics2DRuntimeException("unexpected exception");
            }
            gc.transform(affinetransform);
            flag = drawImage(image, 0, 0, ((ImageObserver) (null)));
            gc.transform(affinetransform1);
        } else
        {
            AffineTransform affinetransform2 = new AffineTransform(gc.getTransform());
            gc.transform(affinetransform);
            flag = drawImage(image, 0, 0, ((ImageObserver) (null)));
            gc.setTransform(affinetransform2);
        }
        return flag;
    }

    public void drawImage(BufferedImage bufferedimage, BufferedImageOp bufferedimageop, int i, int j)
    {
        bufferedimage = bufferedimageop.filter(bufferedimage, null);
        drawImage(((Image) (bufferedimage)), i, j, ((ImageObserver) (null)));
    }

    public void drawRenderedImage(RenderedImage renderedimage, AffineTransform affinetransform)
    {
        Element element = getGenericImageHandler().createElement(getGeneratorContext());
        AffineTransform affinetransform1 = getGenericImageHandler().handleImage(renderedimage, element, renderedimage.getMinX(), renderedimage.getMinY(), renderedimage.getWidth(), renderedimage.getHeight(), getGeneratorContext());
        AffineTransform affinetransform2;
        if(affinetransform == null)
            affinetransform2 = affinetransform1;
        else
        if(affinetransform1 == null)
        {
            affinetransform2 = affinetransform;
        } else
        {
            affinetransform2 = new AffineTransform(affinetransform);
            affinetransform2.concatenate(affinetransform1);
        }
        if(affinetransform2 == null)
            domGroupManager.addElement(element);
        else
        if(affinetransform2.getDeterminant() != 0.0D)
        {
            AffineTransform affinetransform3 = null;
            try
            {
                affinetransform3 = affinetransform2.createInverse();
            }
            catch(NoninvertibleTransformException noninvertibletransformexception)
            {
                throw new SVGGraphics2DRuntimeException("unexpected exception");
            }
            gc.transform(affinetransform2);
            domGroupManager.addElement(element);
            gc.transform(affinetransform3);
        } else
        {
            AffineTransform affinetransform4 = new AffineTransform(gc.getTransform());
            gc.transform(affinetransform2);
            domGroupManager.addElement(element);
            gc.setTransform(affinetransform4);
        }
    }

    public void drawRenderableImage(RenderableImage renderableimage, AffineTransform affinetransform)
    {
        Element element = getGenericImageHandler().createElement(getGeneratorContext());
        AffineTransform affinetransform1 = getGenericImageHandler().handleImage(renderableimage, element, renderableimage.getMinX(), renderableimage.getMinY(), renderableimage.getWidth(), renderableimage.getHeight(), getGeneratorContext());
        AffineTransform affinetransform2;
        if(affinetransform == null)
            affinetransform2 = affinetransform1;
        else
        if(affinetransform1 == null)
        {
            affinetransform2 = affinetransform;
        } else
        {
            affinetransform2 = new AffineTransform(affinetransform);
            affinetransform2.concatenate(affinetransform1);
        }
        if(affinetransform2 == null)
            domGroupManager.addElement(element);
        else
        if(affinetransform2.getDeterminant() != 0.0D)
        {
            AffineTransform affinetransform3 = null;
            try
            {
                affinetransform3 = affinetransform2.createInverse();
            }
            catch(NoninvertibleTransformException noninvertibletransformexception)
            {
                throw new SVGGraphics2DRuntimeException("unexpected exception");
            }
            gc.transform(affinetransform2);
            domGroupManager.addElement(element);
            gc.transform(affinetransform3);
        } else
        {
            AffineTransform affinetransform4 = new AffineTransform(gc.getTransform());
            gc.transform(affinetransform2);
            domGroupManager.addElement(element);
            gc.setTransform(affinetransform4);
        }
    }

    public void drawString(String s, float f, float f1)
    {
        if(!textAsShapes)
        {
            if(generatorCtx.svgFont)
                domTreeManager.gcConverter.getFontConverter().recordFontUsage(s, getFont());
            Font font = getFont();
            AffineTransform affinetransform = null;
            AffineTransform affinetransform1 = getTransform();
            if(font != null)
            {
                affinetransform = font.getTransform();
                if(affinetransform != null && !affinetransform.isIdentity())
                {
                    AffineTransform affinetransform2 = new AffineTransform();
                    affinetransform2.translate(f, f1);
                    affinetransform2.concatenate(affinetransform);
                    affinetransform2.translate(-f, -f1);
                    transform(affinetransform2);
                } else
                {
                    affinetransform = null;
                }
            }
            Element element = getDOMFactory().createElementNS("http://www.w3.org/2000/svg", "text");
            element.setAttributeNS(null, "x", generatorCtx.doubleString(f));
            element.setAttributeNS(null, "y", generatorCtx.doubleString(f1));
            element.setAttributeNS("http://www.w3.org/XML/1998/namespace", "xml:space", "preserve");
            element.appendChild(getDOMFactory().createTextNode(s));
            domGroupManager.addElement(element, (short)16);
            if(affinetransform != null)
                setTransform(affinetransform1);
        } else
        {
            java.awt.font.GlyphVector glyphvector = getFont().createGlyphVector(getFontRenderContext(), s);
            drawGlyphVector(glyphvector, f, f1);
        }
    }

    public void drawString(AttributedCharacterIterator attributedcharacteriterator, float f, float f1)
    {
        TextLayout textlayout = new TextLayout(attributedcharacteriterator, getFontRenderContext());
        textlayout.draw(this, f, f1);
    }

    public void fill(Shape shape)
    {
        Element element = shapeConverter.toSVG(shape);
        if(element != null)
            domGroupManager.addElement(element, (short)16);
    }

    public GraphicsConfiguration getDeviceConfiguration()
    {
        return null;
    }

    public static final String DEFAULT_XML_ENCODING = "ISO-8859-1";
    public static final int DEFAULT_MAX_GC_OVERRIDES = 3;
    protected DOMTreeManager domTreeManager;
    protected DOMGroupManager domGroupManager;
    protected SVGGeneratorContext generatorCtx;
    protected SVGShape shapeConverter;
    protected Dimension svgCanvasSize;
    protected Graphics2D fmg;
}
