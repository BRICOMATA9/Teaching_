#!/usr/local/bin/dot
#
# Class diagram 
# Generated by UMLGraph version R5_6 (http://www.umlgraph.org/)
#

digraph G {
	edge [fontname="Helvetica",fontsize=10,labelfontname="Helvetica",labelfontsize=10];
	node [fontname="Helvetica",fontsize=10,shape=plaintext];
	nodesep=0.25;
	ranksep=0.5;
	// clients.Client
	c0 [label=<<table title="clients.Client" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> Client </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  COMPUTER_SERVER_ADDR : String </td></tr>
<tr><td align="left" balign="left">  COMPUTER_SERVER_PORT : int </td></tr>
<tr><td align="left" balign="left">  connected : boolean </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  isConnected() : boolean </td></tr>
<tr><td align="left" balign="left">  disconnect() </td></tr>
<tr><td align="left" balign="left">  run() </td></tr>
<tr><td align="left" balign="left">  main(args : String[]) </td></tr>
		</table></td></tr>
		</table>>, URL="null", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// clients.ComputeFragment
	c1 [label=<<table title="clients.ComputeFragment" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> ComputeFragment </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  start() </td></tr>
		</table></td></tr>
		</table>>, URL="null", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// serialization.Creator<T extends serialization.MySerializable>
	c2 [label=<<table title="serialization.Creator" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> &#171;interface&#187; </td></tr>
<tr><td align="center" balign="center"> Creator&lt;T extends MySerializable&gt; </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"><font face="Helvetica-Oblique" point-size="10.0">  init() : T </font></td></tr>
		</table></td></tr>
		</table>>, URL="null", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// serialization.MySerializable
	c3 [label=<<table title="serialization.MySerializable" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> &#171;interface&#187; </td></tr>
<tr><td align="center" balign="center"> MySerializable </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"><font face="Helvetica-Oblique" point-size="10.0">  serialize(ms : SerializerBuffer) </font></td></tr>
<tr><td align="left" balign="left"><font face="Helvetica-Oblique" point-size="10.0">  deserialize(ms : SerializerBuffer) </font></td></tr>
		</table></td></tr>
		</table>>, URL="null", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// serialization.SerializerBuffer
	c4 [label=<<table title="serialization.SerializerBuffer" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> SerializerBuffer </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  buffer : ByteBuffer </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  writeInt(i : int) </td></tr>
<tr><td align="left" balign="left">  writeFloat(f : float) </td></tr>
<tr><td align="left" balign="left">  writeDouble(d : double) </td></tr>
<tr><td align="left" balign="left">  readInt() : int </td></tr>
<tr><td align="left" balign="left">  readFloat() : float </td></tr>
<tr><td align="left" balign="left">  readDouble() : double </td></tr>
<tr><td align="left" balign="left">  writeMySerializable(ms : MySerializable) </td></tr>
<tr><td align="left" balign="left">  getBuffer() : ByteBuffer </td></tr>
<tr><td align="left" balign="left">  setBuffer(buffer : ByteBuffer) </td></tr>
<tr><td align="left" balign="left">  readMySerializable(creator : Creator&lt;T&gt;) : T </td></tr>
		</table></td></tr>
		</table>>, URL="null", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// serveurs.ComputingServer
	c5 [label=<<table title="serveurs.ComputingServer" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> ComputingServer </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  VERTICAL_DIV : int </td></tr>
<tr><td align="left" balign="left">  HORIZONTAL_DIV : int </td></tr>
<tr><td align="left" balign="left">  BUFFER_SIZE : int </td></tr>
<tr><td align="left" balign="left">  CADRE : Frame </td></tr>
<tr><td align="left" balign="left">  computingService : ServerSocketChannel </td></tr>
<tr><td align="left" balign="left">  computerSelector : Selector </td></tr>
<tr><td align="left" balign="left">  computingBuffer : SerializerBuffer </td></tr>
<tr><td align="left" balign="left">  requests : ConcurrentLinkedQueue&lt;FractalRequest&gt; </td></tr>
<tr><td align="left" balign="left">  images : Map&lt;Integer, BufferedImage&gt; </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  acceptComputer() </td></tr>
<tr><td align="left" balign="left">  addRequest(request : FractalRequest) </td></tr>
<tr><td align="left" balign="left">  removeRequest(request : FractalRequest) </td></tr>
<tr><td align="left" balign="left">  run() </td></tr>
<tr><td align="left" balign="left">  acceptComputers() </td></tr>
<tr><td align="left" balign="left">  makeFractal(request : FractalRequest) </td></tr>
<tr><td align="left" balign="left">  sendFragment(k : SelectionKey, request : FractalRequest, blockid : int) </td></tr>
<tr><td align="left" balign="left">  readPixels(k : SelectionKey, imag : BufferedImage, iteration : int) </td></tr>
<tr><td align="left" balign="left">  addImage(id : int, img : BufferedImage) </td></tr>
<tr><td align="left" balign="left">  getImage(id : int) : BufferedImage </td></tr>
		</table></td></tr>
		</table>>, URL="null", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// serveurs.HttpRequestManager
	c6 [label=<<table title="serveurs.HttpRequestManager" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> HttpRequestManager </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  buffer : ByteBuffer </td></tr>
<tr><td align="left" balign="left">  request : String </td></tr>
<tr><td align="left" balign="left">  computer : ComputingServer </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  run() </td></tr>
<tr><td align="left" balign="left">  readWebRequest() </td></tr>
<tr><td align="left" balign="left">  writeWebResponse() </td></tr>
<tr><td align="left" balign="left">  sendTextFile(socket : SocketChannel, file : File, id : int) </td></tr>
<tr><td align="left" balign="left">  readFile(file : File, id : int) : String </td></tr>
		</table></td></tr>
		</table>>, URL="null", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// serveurs.MandelbrotServer
	c7 [label=<<table title="serveurs.MandelbrotServer" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> MandelbrotServer </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  main(args : String[]) </td></tr>
		</table></td></tr>
		</table>>, URL="null", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// serveurs.ServerHttp
	c8 [label=<<table title="serveurs.ServerHttp" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> ServerHttp </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  BUFFER_SIZE : int </td></tr>
<tr><td align="left" balign="left">  webServer : ServerSocketChannel </td></tr>
<tr><td align="left" balign="left">  webSelector : Selector </td></tr>
<tr><td align="left" balign="left">  computer : ComputingServer </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  acceptWebClient() </td></tr>
<tr><td align="left" balign="left">  runWebServer() </td></tr>
		</table></td></tr>
		</table>>, URL="null", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// utilities.FractalRequest
	c9 [label=<<table title="utilities.FractalRequest" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> FractalRequest </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  CREATOR : Creator&lt;FractalRequest&gt; </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  getInfGauche() : Point </td></tr>
<tr><td align="left" balign="left">  setInfGauche(infGauche : Point) </td></tr>
<tr><td align="left" balign="left">  getSupDroit() : Point </td></tr>
<tr><td align="left" balign="left">  setSupDroit(supDroit : Point) </td></tr>
<tr><td align="left" balign="left">  getIteration() : int </td></tr>
<tr><td align="left" balign="left">  setIteration(iteration : int) </td></tr>
<tr><td align="left" balign="left">  request(url : String) : FractalRequest </td></tr>
<tr><td align="left" balign="left">  toString() : String </td></tr>
<tr><td align="left" balign="left">  serialize(ms : SerializerBuffer) </td></tr>
<tr><td align="left" balign="left">  deserialize(ms : SerializerBuffer) </td></tr>
<tr><td align="left" balign="left">  getOwnerId() : int </td></tr>
<tr><td align="left" balign="left">  setOwnerId(ownerId : int) </td></tr>
		</table></td></tr>
		</table>>, URL="null", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// utilities.FractalUtilities
	c10 [label=<<table title="utilities.FractalUtilities" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> FractalUtilities </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  testMandelBrot(xc : double, yc : double, iteration : int) : int </td></tr>
<tr><td align="left" balign="left">  transpose(abs : int, ord : int, inf : Point, sup : Point, f : Frame) : Point </td></tr>
<tr><td align="left" balign="left">  getFractalPixels(blockId : int, request : FractalRequest, cadre : Frame) : List&lt;Pixel&gt; </td></tr>
		</table></td></tr>
		</table>>, URL="null", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// utilities.Frame
	c11 [label=<<table title="utilities.Frame" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> Frame </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  getLargeur() : int </td></tr>
<tr><td align="left" balign="left">  setLargeur(largeur : int) </td></tr>
<tr><td align="left" balign="left">  getHauteur() : int </td></tr>
<tr><td align="left" balign="left">  setHauteur(hauteur : int) </td></tr>
		</table></td></tr>
		</table>>, URL="null", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// utilities.HttpUtilities
	c12 [label=<<table title="utilities.HttpUtilities" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> HttpUtilities </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  LINE_TO_REPLACE : String </td></tr>
<tr><td align="left" balign="left">  NOT_FOUND_STATUS : String </td></tr>
<tr><td align="left" balign="left">  OK_STATUS : String </td></tr>
<tr><td align="left" balign="left">  DATE_LINE : String </td></tr>
<tr><td align="left" balign="left">  SERVER_NAME : String </td></tr>
<tr><td align="left" balign="left">  NOT_FOUND_BODY : String </td></tr>
<tr><td align="left" balign="left">  br : BufferedReader </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  extractFileName(url : String) : String </td></tr>
<tr><td align="left" balign="left">  extractParameters(url : String) : Map&lt;String, String&gt; </td></tr>
<tr><td align="left" balign="left">  contentType(fileName : String) : String </td></tr>
<tr><td align="left" balign="left">  makeResponseHead(file : File) : String </td></tr>
<tr><td align="left" balign="left">  sendBytes(socket : SocketChannel, file : File, buffer : ByteBuffer) </td></tr>
<tr><td align="left" balign="left">  readFile(file : File) : String </td></tr>
<tr><td align="left" balign="left">  readFile(file : File, request : String) : String </td></tr>
<tr><td align="left" balign="left">  sendTextFile(socket : SocketChannel, file : File, request : String) </td></tr>
<tr><td align="left" balign="left">  hasParameters(url : String) : boolean </td></tr>
		</table></td></tr>
		</table>>, URL="null", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// utilities.Pixel
	c13 [label=<<table title="utilities.Pixel" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> Pixel </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  CREATOR : Creator&lt;Pixel&gt; </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  getAbscisse() : int </td></tr>
<tr><td align="left" balign="left">  setAbscisse(abscisse : int) </td></tr>
<tr><td align="left" balign="left">  getOrdonne() : int </td></tr>
<tr><td align="left" balign="left">  setOrdonne(ordonne : int) </td></tr>
<tr><td align="left" balign="left">  getValue() : int </td></tr>
<tr><td align="left" balign="left">  setValue(value : int) </td></tr>
<tr><td align="left" balign="left">  toString() : String </td></tr>
<tr><td align="left" balign="left">  serialize(ms : SerializerBuffer) </td></tr>
<tr><td align="left" balign="left">  deserialize(ms : SerializerBuffer) </td></tr>
<tr><td align="left" balign="left">  equals(obj : Object) : boolean </td></tr>
		</table></td></tr>
		</table>>, URL="null", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// utilities.Point
	c14 [label=<<table title="utilities.Point" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> Point </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  CREATOR : Creator&lt;Point&gt; </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  getAbscisse() : double </td></tr>
<tr><td align="left" balign="left">  setAbscisse(abs : double) </td></tr>
<tr><td align="left" balign="left">  getOrdonne() : double </td></tr>
<tr><td align="left" balign="left">  setOrdonne(ord : double) </td></tr>
<tr><td align="left" balign="left">  toString() : String </td></tr>
<tr><td align="left" balign="left">  serialize(ms : SerializerBuffer) </td></tr>
<tr><td align="left" balign="left">  deserialize(ms : SerializerBuffer) </td></tr>
		</table></td></tr>
		</table>>, URL="null", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	//clients.Client extends java.lang.Thread
	c15:p -> c0:p [dir=back,arrowtail=empty];
	//serveurs.ComputingServer extends java.lang.Thread
	c15:p -> c5:p [dir=back,arrowtail=empty];
	//serveurs.HttpRequestManager implements java.lang.Runnable
	c16:p -> c6:p [dir=back,arrowtail=empty,style=dashed];
	//utilities.FractalRequest implements serialization.MySerializable
	c3:p -> c9:p [dir=back,arrowtail=empty,style=dashed];
	//utilities.Pixel implements serialization.MySerializable
	c3:p -> c13:p [dir=back,arrowtail=empty,style=dashed];
	//utilities.Point implements serialization.MySerializable
	c3:p -> c14:p [dir=back,arrowtail=empty,style=dashed];
	// java.lang.Runnable
	c16 [label=<<table title="java.lang.Runnable" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="http://java.sun.com/j2se/1.4.2/docs/api/java/lang/Runnable.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> &#171;interface&#187; </td></tr>
<tr><td align="center" balign="center"> Runnable </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"><font face="Helvetica-Oblique" point-size="10.0">  run() </font></td></tr>
		</table></td></tr>
		</table>>, URL="http://java.sun.com/j2se/1.4.2/docs/api/java/lang/Runnable.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// java.lang.Thread
	c15 [label=<<table title="java.lang.Thread" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="http://java.sun.com/j2se/1.4.2/docs/api/java/lang/Thread.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> Thread </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  threadLocals : ThreadLocal.ThreadLocalMap </td></tr>
<tr><td align="left" balign="left">  inheritableThreadLocals : ThreadLocal.ThreadLocalMap </td></tr>
<tr><td align="left" balign="left">  parkBlocker : Object </td></tr>
<tr><td align="left" balign="left">  MIN_PRIORITY : int </td></tr>
<tr><td align="left" balign="left">  NORM_PRIORITY : int </td></tr>
<tr><td align="left" balign="left">  MAX_PRIORITY : int </td></tr>
<tr><td align="left" balign="left">  threadLocalRandomSeed : long </td></tr>
<tr><td align="left" balign="left">  threadLocalRandomProbe : int </td></tr>
<tr><td align="left" balign="left">  threadLocalRandomSecondarySeed : int </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  blockedOn(arg0 : Interruptible) </td></tr>
<tr><td align="left" balign="left">  currentThread() : Thread </td></tr>
<tr><td align="left" balign="left">  yield() </td></tr>
<tr><td align="left" balign="left">  sleep(arg0 : long) </td></tr>
<tr><td align="left" balign="left">  sleep(arg0 : long, arg1 : int) </td></tr>
<tr><td align="left" balign="left">  clone() : Object </td></tr>
<tr><td align="left" balign="left">  start() </td></tr>
<tr><td align="left" balign="left">  run() </td></tr>
<tr><td align="left" balign="left">  stop() </td></tr>
<tr><td align="left" balign="left">  stop(arg0 : Throwable) </td></tr>
<tr><td align="left" balign="left">  interrupt() </td></tr>
<tr><td align="left" balign="left">  interrupted() : boolean </td></tr>
<tr><td align="left" balign="left">  isInterrupted() : boolean </td></tr>
<tr><td align="left" balign="left">  destroy() </td></tr>
<tr><td align="left" balign="left">  isAlive() : boolean </td></tr>
<tr><td align="left" balign="left">  suspend() </td></tr>
<tr><td align="left" balign="left">  resume() </td></tr>
<tr><td align="left" balign="left">  setPriority(arg0 : int) </td></tr>
<tr><td align="left" balign="left">  getPriority() : int </td></tr>
<tr><td align="left" balign="left">  setName(arg0 : String) </td></tr>
<tr><td align="left" balign="left">  getName() : String </td></tr>
<tr><td align="left" balign="left">  getThreadGroup() : ThreadGroup </td></tr>
<tr><td align="left" balign="left">  activeCount() : int </td></tr>
<tr><td align="left" balign="left">  enumerate(arg0 : Thread[]) : int </td></tr>
<tr><td align="left" balign="left">  countStackFrames() : int </td></tr>
<tr><td align="left" balign="left">  join(arg0 : long) </td></tr>
<tr><td align="left" balign="left">  join(arg0 : long, arg1 : int) </td></tr>
<tr><td align="left" balign="left">  join() </td></tr>
<tr><td align="left" balign="left">  dumpStack() </td></tr>
<tr><td align="left" balign="left">  setDaemon(arg0 : boolean) </td></tr>
<tr><td align="left" balign="left">  isDaemon() : boolean </td></tr>
<tr><td align="left" balign="left">  checkAccess() </td></tr>
<tr><td align="left" balign="left">  toString() : String </td></tr>
<tr><td align="left" balign="left">  getContextClassLoader() : ClassLoader </td></tr>
<tr><td align="left" balign="left">  setContextClassLoader(arg0 : ClassLoader) </td></tr>
<tr><td align="left" balign="left">  holdsLock(arg0 : Object) : boolean </td></tr>
<tr><td align="left" balign="left">  getStackTrace() : StackTraceElement[] </td></tr>
<tr><td align="left" balign="left">  getAllStackTraces() : Map&lt;Thread, StackTraceElement&gt; </td></tr>
<tr><td align="left" balign="left">  getId() : long </td></tr>
<tr><td align="left" balign="left">  getState() : Thread.State </td></tr>
<tr><td align="left" balign="left">  setDefaultUncaughtExceptionHandler(arg0 : Thread.UncaughtExceptionHandler) </td></tr>
<tr><td align="left" balign="left">  getDefaultUncaughtExceptionHandler() : Thread.UncaughtExceptionHandler </td></tr>
<tr><td align="left" balign="left">  getUncaughtExceptionHandler() : Thread.UncaughtExceptionHandler </td></tr>
<tr><td align="left" balign="left">  setUncaughtExceptionHandler(arg0 : Thread.UncaughtExceptionHandler) </td></tr>
<tr><td align="left" balign="left">  processQueue(arg0 : ReferenceQueue&lt;Class&lt;?&gt;&gt;, arg1 : ConcurrentMap&lt;?, ?&gt;) </td></tr>
		</table></td></tr>
		</table>>, URL="http://java.sun.com/j2se/1.4.2/docs/api/java/lang/Thread.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];
}

